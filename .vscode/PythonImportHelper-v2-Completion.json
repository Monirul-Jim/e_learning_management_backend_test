[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "api_not_found",
        "importPath": "learning.views",
        "description": "learning.views",
        "isExtraImport": true,
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSets",
        "importPath": "learning.views",
        "description": "learning.views",
        "isExtraImport": true,
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "CourseViewSets",
        "importPath": "learning.views",
        "description": "learning.views",
        "isExtraImport": true,
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "ModuleViewSets",
        "importPath": "learning.views",
        "description": "learning.views",
        "isExtraImport": true,
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "ParentModuleViewSets",
        "importPath": "learning.views",
        "description": "learning.views",
        "isExtraImport": true,
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "VideoViewSets",
        "importPath": "learning.views",
        "description": "learning.views",
        "isExtraImport": true,
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "QuizViewSets",
        "importPath": "learning.views",
        "description": "learning.views",
        "isExtraImport": true,
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "CategoryModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CourseModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "ModuleModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "VideoModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "ParentModule",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "QuizModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "#  AnswerModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CategoryModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CourseModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "ModuleModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "ParentModule",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "VideoModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "QuizModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CategoryModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CourseModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "ModuleModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "ParentModule",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "VideoModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "QuizModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CourseModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CourseModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CourseModel",
        "importPath": "learning.models",
        "description": "learning.models",
        "isExtraImport": true,
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "CategorySerializers",
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "isExtraImport": true,
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "CourseSerializer",
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "isExtraImport": true,
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "ModuleSerializer",
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "isExtraImport": true,
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "ParentModuleSerializer",
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "isExtraImport": true,
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "VideoSerializer",
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "isExtraImport": true,
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "QuizSerializer",
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "isExtraImport": true,
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "send_response",
        "importPath": "learning.utils",
        "description": "learning.utils",
        "isExtraImport": true,
        "detail": "learning.utils",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "PurchaseOrderModel",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "PurchaseOrderModel",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "PurchaseOrderModel",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "PurchaseOrderSerializer",
        "importPath": "payments.serializer",
        "description": "payments.serializer",
        "isExtraImport": true,
        "detail": "payments.serializer",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "RegistrationViewSet",
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "isExtraImport": true,
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "isExtraImport": true,
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "e_learning.asgi",
        "description": "e_learning.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "e_learning.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# ALLOWED_HOSTS = []\n# ALLOWED_HOSTS = ['e-learning-management-backend-test.onrender.com']\nALLOWED_HOSTS = ['https://e-learning-management-backend-test.onrender.com']",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# ALLOWED_HOSTS = []\n# ALLOWED_HOSTS = ['e-learning-management-backend-test.onrender.com']\nALLOWED_HOSTS = ['https://e-learning-management-backend-test.onrender.com']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "DEBUG = True\n# ALLOWED_HOSTS = []\n# ALLOWED_HOSTS = ['e-learning-management-backend-test.onrender.com']\nALLOWED_HOSTS = ['https://e-learning-management-backend-test.onrender.com']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['https://e-learning-management-backend-test.onrender.com']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'rest_framework_simplejwt',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "ROOT_URLCONF = 'e_learning.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "WSGI_APPLICATION = 'e_learning.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': BASE_DIR / 'db.sqlite3',\n#     }\n# }\nDATABASES = {",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.parse(\n        os.getenv('DATABASE_URL')\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"https://e-learning-management-beige.vercel.app\",\n]\nCORS_ALLOW_CREDENTIALS = True\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# SITE_URL = 'http://localhost:5173'\nSITE_URL = 'https://e-learning-management-beige.vercel.app/'\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# SITE_URL = 'http://localhost:5173'\nSITE_URL = 'https://e-learning-management-beige.vercel.app/'\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')\n# settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'learning.exceptions.custom_exception_handler',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# SITE_URL = 'http://localhost:5173'\nSITE_URL = 'https://e-learning-management-beige.vercel.app/'\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')\n# settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'learning.exceptions.custom_exception_handler',\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# SITE_URL = 'http://localhost:5173'\nSITE_URL = 'https://e-learning-management-beige.vercel.app/'\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')\n# settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'learning.exceptions.custom_exception_handler',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Only for authentication",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "USE_TZ = True\n# SITE_URL = 'http://localhost:5173'\nSITE_URL = 'https://e-learning-management-beige.vercel.app/'\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')\n# settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'learning.exceptions.custom_exception_handler',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Only for authentication\n    ),",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "SITE_URL",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "SITE_URL = 'https://e-learning-management-beige.vercel.app/'\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')\n# settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'learning.exceptions.custom_exception_handler',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Only for authentication\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        # Allow access by default; customize as needed",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_SECRET_KEY",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')\n# settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'learning.exceptions.custom_exception_handler',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Only for authentication\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        # Allow access by default; customize as needed\n        'rest_framework.permissions.AllowAny',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'learning.exceptions.custom_exception_handler',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Only for authentication\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        # Allow access by default; customize as needed\n        'rest_framework.permissions.AllowAny',\n    ),\n}",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "e_learning.settings",
        "description": "e_learning.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "e_learning.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "e_learning.urls",
        "description": "e_learning.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('learning/', include('learning.urls')),\n    path('sign-login/', include('signup_login.urls')),\n    path('payments/', include('payments.urls'))\n]\nhandler404 = 'learning.views.api_not_found'",
        "detail": "e_learning.urls",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "e_learning.urls",
        "description": "e_learning.urls",
        "peekOfCode": "handler404 = 'learning.views.api_not_found'",
        "detail": "e_learning.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "e_learning.wsgi",
        "description": "e_learning.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "e_learning.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "learning.migrations.0001_initial",
        "description": "learning.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CategoryModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(max_length=40, unique=True)),",
        "detail": "learning.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "learning.migrations.0002_quizmodel",
        "description": "learning.migrations.0002_quizmodel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('learning', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='QuizModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=100)),",
        "detail": "learning.migrations.0002_quizmodel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "learning.migrations.0003_quizmodel_quiz",
        "description": "learning.migrations.0003_quizmodel_quiz",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('learning', '0002_quizmodel'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='quizmodel',\n            name='quiz',\n            field=models.CharField(blank=True, max_length=100, null=True),\n        ),",
        "detail": "learning.migrations.0003_quizmodel_quiz",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "learning.migrations.0004_remove_quizmodel_quiz",
        "description": "learning.migrations.0004_remove_quizmodel_quiz",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('learning', '0003_quizmodel_quiz'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='quizmodel',\n            name='quiz',\n        ),\n    ]",
        "detail": "learning.migrations.0004_remove_quizmodel_quiz",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "learning.migrations.0005_quizresult",
        "description": "learning.migrations.0005_quizresult",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('learning', '0004_remove_quizmodel_quiz'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='QuizResult',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "learning.migrations.0005_quizresult",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "learning.migrations.0006_delete_quizresult",
        "description": "learning.migrations.0006_delete_quizresult",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('learning', '0005_quizresult'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='QuizResult',\n        ),\n    ]",
        "detail": "learning.migrations.0006_delete_quizresult",
        "documentation": {}
    },
    {
        "label": "CategoryModelAdmin",
        "kind": 6,
        "importPath": "learning.admin",
        "description": "learning.admin",
        "peekOfCode": "class CategoryModelAdmin(admin.ModelAdmin):\n    list_display = ('category', 'slug')\nadmin.site.register(CourseModel)\nadmin.site.register(ParentModule)\n@admin.register(ModuleModel)\nclass ModuleAdmin(admin.ModelAdmin):\n    list_display = ('title', 'course', 'parent_module')\n    search_fields = ('title', 'course__title')\n# Registering VideoModel\n@admin.register(VideoModel)",
        "detail": "learning.admin",
        "documentation": {}
    },
    {
        "label": "ModuleAdmin",
        "kind": 6,
        "importPath": "learning.admin",
        "description": "learning.admin",
        "peekOfCode": "class ModuleAdmin(admin.ModelAdmin):\n    list_display = ('title', 'course', 'parent_module')\n    search_fields = ('title', 'course__title')\n# Registering VideoModel\n@admin.register(VideoModel)\nclass VideoAdmin(admin.ModelAdmin):\n    list_display = ('title', 'module', 'video_url')\n    search_fields = ('title', 'module__title')\n@admin.register(QuizModel)\nclass QuizAdmin(admin.ModelAdmin):",
        "detail": "learning.admin",
        "documentation": {}
    },
    {
        "label": "VideoAdmin",
        "kind": 6,
        "importPath": "learning.admin",
        "description": "learning.admin",
        "peekOfCode": "class VideoAdmin(admin.ModelAdmin):\n    list_display = ('title', 'module', 'video_url')\n    search_fields = ('title', 'module__title')\n@admin.register(QuizModel)\nclass QuizAdmin(admin.ModelAdmin):\n    list_display = ['title', 'module']",
        "detail": "learning.admin",
        "documentation": {}
    },
    {
        "label": "QuizAdmin",
        "kind": 6,
        "importPath": "learning.admin",
        "description": "learning.admin",
        "peekOfCode": "class QuizAdmin(admin.ModelAdmin):\n    list_display = ['title', 'module']",
        "detail": "learning.admin",
        "documentation": {}
    },
    {
        "label": "LearningConfig",
        "kind": 6,
        "importPath": "learning.apps",
        "description": "learning.apps",
        "peekOfCode": "class LearningConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'learning'",
        "detail": "learning.apps",
        "documentation": {}
    },
    {
        "label": "custom_exception_handler",
        "kind": 2,
        "importPath": "learning.exceptions",
        "description": "learning.exceptions",
        "peekOfCode": "def custom_exception_handler(exc, context):\n    response = exception_handler(exc, context)\n    if response is not None:\n        response.data = {\n            'statusCode': response.status_code,\n            'success': False,\n            'message': response.data.get('detail', 'An error occurred'),\n            'error': response.data\n        }\n    else:",
        "detail": "learning.exceptions",
        "documentation": {}
    },
    {
        "label": "CategoryModel",
        "kind": 6,
        "importPath": "learning.models",
        "description": "learning.models",
        "peekOfCode": "class CategoryModel(models.Model):\n    category = models.CharField(max_length=40, unique=True)\n    slug = models.SlugField(max_length=50, unique=True, blank=True)\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.category).replace('-', '_')\n        super(CategoryModel, self).save(*args, **kwargs)\n    def clean(self):\n        if CategoryModel.objects.filter(category=self.category).exists():\n            raise ValidationError(",
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CourseModel",
        "kind": 6,
        "importPath": "learning.models",
        "description": "learning.models",
        "peekOfCode": "class CourseModel(models.Model):\n    image = models.URLField(max_length=500)\n    title = models.CharField(max_length=100)\n    description = models.TextField()\n    price = models.IntegerField(blank=True, null=True)\n    categories = models.ManyToManyField('CategoryModel')\n    def clean(self):\n        if self.price is not None and self.price < 0:\n            raise ValidationError({'price': \"Price cannot be negative.\"})\n    def __str__(self):",
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "ParentModule",
        "kind": 6,
        "importPath": "learning.models",
        "description": "learning.models",
        "peekOfCode": "class ParentModule(models.Model):\n    title = models.CharField(max_length=300)\n    def __str__(self):\n        return self.title\nclass ModuleModel(models.Model):\n    course = models.ForeignKey(\n        CourseModel, on_delete=models.CASCADE, related_name='modules')\n    title = models.CharField(max_length=100)\n    parent_module = models.ForeignKey(\n        ParentModule, on_delete=models.CASCADE, null=True, blank=True, related_name='child_modules')",
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "ModuleModel",
        "kind": 6,
        "importPath": "learning.models",
        "description": "learning.models",
        "peekOfCode": "class ModuleModel(models.Model):\n    course = models.ForeignKey(\n        CourseModel, on_delete=models.CASCADE, related_name='modules')\n    title = models.CharField(max_length=100)\n    parent_module = models.ForeignKey(\n        ParentModule, on_delete=models.CASCADE, null=True, blank=True, related_name='child_modules')\n    description = models.TextField(blank=True, null=True)\n    def __str__(self):\n        return self.title\nclass VideoModel(models.Model):",
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "VideoModel",
        "kind": 6,
        "importPath": "learning.models",
        "description": "learning.models",
        "peekOfCode": "class VideoModel(models.Model):\n    module = models.ForeignKey(\n        ModuleModel, on_delete=models.CASCADE, related_name='videos')\n    title = models.CharField(max_length=100)\n    video_url = models.URLField(max_length=500)\n    duration = models.DurationField()\n    def __str__(self):\n        return self.title\nclass QuizModel(models.Model):\n    module = models.ForeignKey(",
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "QuizModel",
        "kind": 6,
        "importPath": "learning.models",
        "description": "learning.models",
        "peekOfCode": "class QuizModel(models.Model):\n    module = models.ForeignKey(\n        ModuleModel, on_delete=models.CASCADE, related_name='quizzes', null=True, blank=True)\n    title = models.CharField(max_length=100)\n    questions = models.JSONField(\n        help_text=\"Stores the question, options, and correct answer in JSON format\", blank=True, null=True\n    )\n    def __str__(self):\n        return self.title",
        "detail": "learning.models",
        "documentation": {}
    },
    {
        "label": "CategorySerializers",
        "kind": 6,
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "peekOfCode": "class CategorySerializers(serializers.ModelSerializer):\n    class Meta:\n        model = CategoryModel\n        fields = ['id', 'category', 'slug']\n# class CourseSerializer(serializers.ModelSerializer):\n#     categories = CategorySerializers(many=True)\n#     # categories = serializers.StringRelatedField(many=True)\n#     class Meta:\n#         model = CourseModel\n#         fields = '__all__'",
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "CourseSerializer",
        "kind": 6,
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "peekOfCode": "class CourseSerializer(serializers.ModelSerializer):\n    categories = serializers.PrimaryKeyRelatedField(\n        many=True, queryset=CategoryModel.objects.all()\n    )\n    category_details = CategorySerializers(\n        many=True, read_only=True, source='categories')\n    class Meta:\n        model = CourseModel\n        fields = ['id', 'image', 'title', 'description',\n                  'price', 'categories', 'category_details']",
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "ParentModuleSerializer",
        "kind": 6,
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "peekOfCode": "class ParentModuleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ParentModule\n        fields = ['id', 'title']\n# class ModuleSerializer(serializers.ModelSerializer):\n#     # course = serializers.PrimaryKeyRelatedField(\n#     #     queryset=CourseModel.objects.all())\n#     # parent_module = serializers.PrimaryKeyRelatedField(\n#     #     queryset=ParentModule.objects.all())\n#     course = CourseSerializer()",
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "ModuleSerializer",
        "kind": 6,
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "peekOfCode": "class ModuleSerializer(serializers.ModelSerializer):\n    course = serializers.PrimaryKeyRelatedField(\n        queryset=CourseModel.objects.all(), write_only=True)\n    course_details = CourseSerializer(read_only=True, source='course')\n    parent_module = serializers.PrimaryKeyRelatedField(\n        queryset=ParentModule.objects.all(), required=False, write_only=True)\n    parent_module_details = ParentModuleSerializer(\n        read_only=True, source='parent_module')\n    class Meta:\n        model = ModuleModel",
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "VideoSerializer",
        "kind": 6,
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "peekOfCode": "class VideoSerializer(serializers.ModelSerializer):\n    module = serializers.PrimaryKeyRelatedField(\n        queryset=ModuleModel.objects.all(), write_only=True\n    )  # Write-only field to accept module ID\n    module_details = ModuleSerializer(\n        source='module', read_only=True)  # Read-only nested field\n    class Meta:\n        model = VideoModel\n        fields = ['id', 'title', 'video_url',\n                  'duration', 'module', 'module_details']",
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "QuizSerializer",
        "kind": 6,
        "importPath": "learning.serializers",
        "description": "learning.serializers",
        "peekOfCode": "class QuizSerializer(serializers.ModelSerializer):\n    module_title = serializers.SerializerMethodField()\n    class Meta:\n        model = QuizModel\n        fields = ['id', 'module', 'module_title', 'title', 'questions']\n    def create(self, validated_data):\n        questions_data = validated_data.pop('questions', None)\n        if not isinstance(questions_data, dict):\n            raise serializers.ValidationError(\n                {\"questions\": \"Questions should be a dictionary.\"})",
        "detail": "learning.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "learning.urls",
        "description": "learning.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register('category', CategoryViewSets)\nrouter.register('courses', CourseViewSets)\nrouter.register('modules', ModuleViewSets)\nrouter.register('videos', VideoViewSets)\nrouter.register('parent-modules', ParentModuleViewSets)\nrouter.register('quizzes', QuizViewSets, basename='quiz')\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "learning.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "learning.urls",
        "description": "learning.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "learning.urls",
        "documentation": {}
    },
    {
        "label": "api_not_found",
        "kind": 2,
        "importPath": "learning.utils",
        "description": "learning.utils",
        "peekOfCode": "def api_not_found(request, exception=None):\n    return JsonResponse({\n        'statusCode': 404,\n        'success': False,\n        'message': 'API Not Found!!',\n        'error': ''\n    }, status=404)\ndef send_response(success, message, data=None, status_code=200):\n    return Response({\n        'statusCode': status_code,",
        "detail": "learning.utils",
        "documentation": {}
    },
    {
        "label": "send_response",
        "kind": 2,
        "importPath": "learning.utils",
        "description": "learning.utils",
        "peekOfCode": "def send_response(success, message, data=None, status_code=200):\n    return Response({\n        'statusCode': status_code,\n        'success': success,\n        'message': message,\n        'data': data\n    }, status=status_code)",
        "detail": "learning.utils",
        "documentation": {}
    },
    {
        "label": "CategoryViewSets",
        "kind": 6,
        "importPath": "learning.views",
        "description": "learning.views",
        "peekOfCode": "class CategoryViewSets(viewsets.ModelViewSet):\n    queryset = CategoryModel.objects.all()\n    serializer_class = CategorySerializers\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        return send_response(\n            success=True,\n            message=\"Category created successfully\",",
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "CourseViewSets",
        "kind": 6,
        "importPath": "learning.views",
        "description": "learning.views",
        "peekOfCode": "class CourseViewSets(viewsets.ModelViewSet):\n    queryset = CourseModel.objects.all()\n    serializer_class = CourseSerializer\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        return send_response(\n            success=True,\n            message=\"Course created successfully\",",
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "ParentModuleViewSets",
        "kind": 6,
        "importPath": "learning.views",
        "description": "learning.views",
        "peekOfCode": "class ParentModuleViewSets(viewsets.ModelViewSet):\n    queryset = ParentModule.objects.all()\n    serializer_class = ParentModuleSerializer\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        return send_response(\n            success=True,\n            message=\"Parent Module created successfully\",",
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "ModuleViewSets",
        "kind": 6,
        "importPath": "learning.views",
        "description": "learning.views",
        "peekOfCode": "class ModuleViewSets(viewsets.ModelViewSet):\n    queryset = ModuleModel.objects.all()\n    serializer_class = ModuleSerializer\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        return send_response(\n            success=True,\n            message=\"Module created successfully\",",
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "VideoViewSets",
        "kind": 6,
        "importPath": "learning.views",
        "description": "learning.views",
        "peekOfCode": "class VideoViewSets(viewsets.ModelViewSet):\n    queryset = VideoModel.objects.all()\n    serializer_class = VideoSerializer\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        return send_response(\n            success=True,\n            message=\"Video created successfully\",",
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "QuizViewSets",
        "kind": 6,
        "importPath": "learning.views",
        "description": "learning.views",
        "peekOfCode": "class QuizViewSets(viewsets.ModelViewSet):\n    queryset = QuizModel.objects.all()\n    serializer_class = QuizSerializer\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        module_title = self.request.query_params.get(\n            'module_title', None)  # Get 'module_title' query parameter\n        if module_title:\n            # Filter quizzes based on the module title (case insensitive)\n            queryset = queryset.filter(module__title__iexact=module_title)",
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "api_not_found",
        "kind": 2,
        "importPath": "learning.views",
        "description": "learning.views",
        "peekOfCode": "def api_not_found(request, exception=None):\n    return JsonResponse({\n        'statusCode': 404,\n        'success': False,\n        'message': 'API Not Found!!',\n        'error': ''\n    }, status=404)",
        "detail": "learning.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "payments.migrations.0001_initial",
        "description": "payments.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('learning', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PurchaseOrderModel',\n            fields=[",
        "detail": "payments.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PaymentsConfig",
        "kind": 6,
        "importPath": "payments.apps",
        "description": "payments.apps",
        "peekOfCode": "class PaymentsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'payments'",
        "detail": "payments.apps",
        "documentation": {}
    },
    {
        "label": "PurchaseOrderModel",
        "kind": 6,
        "importPath": "payments.models",
        "description": "payments.models",
        "peekOfCode": "class PurchaseOrderModel(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    course = models.ForeignKey(CourseModel, on_delete=models.CASCADE)\n    total_amount = models.DecimalField(max_digits=10, decimal_places=2)\n    purchased_at = models.DateTimeField(auto_now_add=True)\n    # Optional fields\n    stripe_session_id = models.CharField(\n        max_length=255, blank=True, null=True)  # Track Stripe session\n    # Optional to group purchases\n    order_id = models.CharField(max_length=50, blank=True, null=True)",
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "payments.serializer",
        "description": "payments.serializer",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'first_name',\n                  'last_name']\nclass CourseSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CourseModel\n        fields = ['id', 'title', 'description', 'image',\n                  'price']",
        "detail": "payments.serializer",
        "documentation": {}
    },
    {
        "label": "CourseSerializer",
        "kind": 6,
        "importPath": "payments.serializer",
        "description": "payments.serializer",
        "peekOfCode": "class CourseSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CourseModel\n        fields = ['id', 'title', 'description', 'image',\n                  'price']\nclass PurchaseOrderSerializer(serializers.ModelSerializer):\n    user = UserSerializer()\n    course = CourseSerializer()\n    class Meta:\n        model = PurchaseOrderModel",
        "detail": "payments.serializer",
        "documentation": {}
    },
    {
        "label": "PurchaseOrderSerializer",
        "kind": 6,
        "importPath": "payments.serializer",
        "description": "payments.serializer",
        "peekOfCode": "class PurchaseOrderSerializer(serializers.ModelSerializer):\n    user = UserSerializer()\n    course = CourseSerializer()\n    class Meta:\n        model = PurchaseOrderModel\n        fields = ['id', 'total_amount', 'purchased_at', 'user', 'course',\n                  'payment_status']",
        "detail": "payments.serializer",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "payments.urls",
        "description": "payments.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'orders', OrderCourseView, basename='order')\nurlpatterns = [\n    path('create-checkout-session/', StripeCheckoutView.as_view()),\n    path('', include(router.urls)),\n]",
        "detail": "payments.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "payments.urls",
        "description": "payments.urls",
        "peekOfCode": "urlpatterns = [\n    path('create-checkout-session/', StripeCheckoutView.as_view()),\n    path('', include(router.urls)),\n]",
        "detail": "payments.urls",
        "documentation": {}
    },
    {
        "label": "StripeCheckoutView",
        "kind": 6,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "class StripeCheckoutView(APIView):\n    def post(self, request):\n        try:\n            user_data = request.data.get('userData', {})\n            courses = request.data.get('courses', [])\n            total_amount = request.data.get('totalAmount', 0)\n            # Ensure that userData and courses are not empty\n            if not user_data or not courses:\n                return Response({'error': 'User data or courses missing'}, status=status.HTTP_400_BAD_REQUEST)\n            # Fetch or create the user",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "OrderCourseView",
        "kind": 6,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "class OrderCourseView(viewsets.ModelViewSet):\n    queryset = PurchaseOrderModel.objects.all()\n    serializer_class = PurchaseOrderSerializer\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    def retrieve(self, request, *args, **kwargs):",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\n# class StripeCheckoutView(APIView):\n#     def post(self, request):\n#         try:\n#             total_amount = request.data.get('totalAmount', 0)\n#             total_amount_cents = int(float(total_amount) * 100)\n#             checkout_session = stripe.checkout.Session.create(\n#                 payment_method_types=['card'],\n#                 line_items=[{\n#                     'price_data': {",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "SignupLoginConfig",
        "kind": 6,
        "importPath": "signup_login.apps",
        "description": "signup_login.apps",
        "peekOfCode": "class SignupLoginConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'signup_login'",
        "detail": "signup_login.apps",
        "documentation": {}
    },
    {
        "label": "RegistrationSerializer",
        "kind": 6,
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "peekOfCode": "class RegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    password1 = serializers.CharField(write_only=True)\n    class Meta:\n        model = User\n        fields = ['username', 'first_name', 'last_name',\n                  'email', 'password', 'password1']\n    def validate(self, data):\n        # Check if the passwords match\n        if data['password'] != data['password1']:",
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "peekOfCode": "class LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    password = serializers.CharField(write_only=True)\n    def validate(self, attrs):\n        email = attrs.get('email')\n        password = attrs.get('password')\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:\n            raise serializers.ValidationError(",
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "signup_login.urls",
        "description": "signup_login.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register('register', RegistrationViewSet,\n                basename='register')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('login/', LoginView.as_view(), name='login'),\n    path('refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]",
        "detail": "signup_login.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "signup_login.urls",
        "description": "signup_login.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('login/', LoginView.as_view(), name='login'),\n    path('refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]",
        "detail": "signup_login.urls",
        "documentation": {}
    },
    {
        "label": "RegistrationViewSet",
        "kind": 6,
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "peekOfCode": "class RegistrationViewSet(viewsets.ViewSet):\n    queryset = []\n    permission_classes = [AllowAny]\n    def create(self, request):\n        serializer = RegistrationSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response({\"message\": \"User registered successfully.\"}, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\nclass LoginView(APIView):",
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "peekOfCode": "class LoginView(APIView):\n    def post(self, request):\n        serializer = LoginSerializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.validated_data['user']\n            user.last_login = timezone.now()\n            user.save()\n            refresh = RefreshToken.for_user(user)\n            access_token = refresh.access_token\n            access_token['email'] = user.email",
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'e_learning.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]